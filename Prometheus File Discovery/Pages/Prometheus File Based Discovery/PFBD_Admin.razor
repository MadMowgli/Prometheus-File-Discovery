<!-- Blazor Section -->
@page "/PFBD_Admin."
@inject HttpClient Http
@using Prometheus_File_Discovery.Pages.Prometheus_File_Based_Discovery.Model
@using Prometheus_File_Based_Discovery.Data.Example

<!-- HTML Section -->
<div class="container-fluid mt-3">

    <div class="row my-4">
        <h1 class="display-4">Prometheus File Based SD Configurator</h1>
    </div>


    <!-- Control Forms -->
    <div class="row my-5 justify-content-between">

        <!-- Add Scraping Target -->
        <div class="col-sm-3">

            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Add</h3>
                </div>
                <div class="card-body">
                    <div class="input-group needs-validation input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Job Name</span>
                        <input type="text" class="form-control" @bind="@add_jobName" placeholder="Job Name" aria-label="Job Name" aria-describedby="basic-addon1" required />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Targets</span>
                        <input type="text" class="form-control" @bind="@add_targets" placeholder="192.168.0.1:8000, 192.168.1.1:3000" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Labels</span>
                        <input type="text" class="form-control" @bind="@add_labels" placeholder="key:value, key2:value2" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Scrape Interval</span>
                        <input type="text" class="form-control" @bind="@add_scrapeInterval" placeholder="10s" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Scrape Timeout</span>
                        <input type="text" class="form-control" @bind="@add_scrapeTimeout" placeholder="5s" aria-label="Scrape Timeout" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Metrics Path</span>
                        <input type="text" class="form-control" @bind="@add_metricsPath" placeholder="/metrics" aria-label="Metrics Path" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <label class="input-group-text" for="inputGroupSelect01">Scheme</label>
                        <select class="form-select" id="inputGroupSelect01">
                            <option value="https">https</option>
                            <option value="http">http</option>
                        </select>
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <button type="button" class="btn btn-primary float-end" @onclick="addScrapingTarget">Add</button>
                </div>
            </div>

        </div>

        <!-- Update Scraping Target -->
        <div class="col-sm-3">

            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Update</h3>
                </div>
                <div class="card-body">
                    <div class="input-group input-group-sm mb-3">
                        <label class="input-group-text" for="inputGroupSelect01">Job Name</label>
                        <select class="form-select" id="inputGroupSelect01">
                            <option value="https">placeholder</option>
                            <option value="http">http</option>
                        </select>
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Targets</span>
                        <input type="text" class="form-control" @bind="@update_targets" placeholder="192.168.0.1:8000, 192.168.1.1:3000" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Labels</span>
                        <input type="text" class="form-control" @bind="@update_labels" placeholder="key:value, key2:value2" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Scrape Interval</span>
                        <input type="text" class="form-control" @bind="@update_scrapeInterval" placeholder="10s" aria-label="Scrape Interval" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Scrape Timeout</span>
                        <input type="text" class="form-control" @bind="@update_scrapeTimeout" placeholder="5s" aria-label="Scrape Timeout" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <span class="input-group-text" id="basic-addon1">Metrics Path</span>
                        <input type="text" class="form-control" @bind="@update_metricsPath" placeholder="/metrics" aria-label="Metrics Path" aria-describedby="basic-addon1" />
                    </div>
                    <div class="input-group input-group-sm mb-3">
                        <label class="input-group-text" for="inputGroupSelect01">Scheme</label>
                        <select class="form-select" id="inputGroupSelect01">
                            <option value="https">https</option>
                            <option value="http">http</option>
                        </select>
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <button type="button" class="btn btn-outline-primary float-end" @onclick="updateScrapingTarget">Update</button>
                </div>
            </div>

        </div>

        <!-- Remove Scraping Target -->
        <div class="col-sm-3">

            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Remove</h3>
                </div>
                <div class="card-body">
                    <div class="input-group input-group-sm mb-3">
                        <label class="input-group-text" for="inputGroupSelect01">Job Name</label>
                        <select class="form-select" id="inputGroupSelect01">
                            <option value="https">placeholder</option>
                            <option value="http">http</option>
                        </select>
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <button type="button" class="btn btn-danger float-end" @onclick="removeScrapingTarget">Remove</button>
                </div>
            </div>

            <!-- Upload configuration -->
            <div class="card my-4">
                <div class="card-header">
                    <h3 class="text-center">Upload Configuration</h3>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="file" class="form-control" id="inputGroupFile03" aria-describedby="inputGroupFileAddon03" aria-label="Upload">
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <button type="button" class="btn btn-success float-end" @onclick="removeScrapingTarget">Upload</button>
                </div>
            </div>


        </div>


    </div>

</div>

<!-- Code Section-->
@code {
    // Fields
    private string? add_jobName { get; set; }
    private string? add_scrapeInterval { get; set; }
    private string? add_scrapeTimeout { get; set; }
    private string? add_metricsPath { get; set; }
    private string? add_scheme { get; set; }
    private string? add_targets { get; set; }
    private string? add_labels { get; set; }
    private List<String> add_targetList { get; set; } = new List<string>();
    private Dictionary<string, string> add_labelDict { get; set; } = new Dictionary<string, string>();

    private string? update_jobName { get; set; }
    private string? update_scrapeInterval { get; set; }
    private string? update_scrapeTimeout { get; set; }
    private string? update_metricsPath { get; set; }
    private string? update_scheme { get; set; }
    private string? update_targets { get; set; }
    private string? update_labels { get; set; }
    private List<String> update_targetList { get; set; } = new List<string>();
    private Dictionary<string, string> update_labelDict { get; set; } = new Dictionary<string, string>();

    private string? delete_jobName { get; set; }

    private PrometheusJSON.Rootobject? config { get; set; }

    // Load data
    protected override async Task OnInitializedAsync()
    {
        config = await Http.GetFromJsonAsync<PrometheusJSON.Rootobject>("sample-data/prometheus.json");
    }

    // Methods
    public void addScrapingTarget()
    {
        // Set defaults where necessary
        if (this.add_jobName == null || this.add_jobName.Equals("")) { this.add_jobName = "JobDefault"; }
        if (this.add_scrapeInterval == null || this.add_scrapeInterval.Equals("")) { this.add_scrapeInterval = "10s"; }
        if (this.add_scrapeTimeout == null || this.add_scrapeTimeout.Equals("")) { this.add_scrapeTimeout = "5s"; }
        if (this.add_metricsPath == null || this.add_metricsPath.Equals("")) { this.add_metricsPath = "/metrics"; }
        if (this.add_scheme == null || this.add_scheme.Equals("")) { this.add_scheme = "https"; }
        if (this.add_targets == null || this.add_targets.Equals("")) { this.add_targets = "192.168.0.1"; }
        if (this.add_labels == null || this.add_labels.Equals("")) { this.add_labels = "label_1:value_1"; }

        // Fill up collections
        this.add_targetList.AddRange(this.add_targets.Split(","));
        string[] splitLabels = this.add_labels.Split(":");
        for (int index = 0; index < splitLabels.Length; index += 2)
        {
            this.add_labelDict.Add(splitLabels[index], splitLabels[index + 1]);
        }

        // Create new ProemtheusJob
        PrometheusJob prometheusJob = new PrometheusJob(add_jobName, add_scrapeInterval, add_scrapeTimeout,
                                                        add_metricsPath, add_scheme, add_targetList, add_labelDict);


        // Debug
        Console.WriteLine(this.add_jobName);
        Console.WriteLine(this.add_scrapeInterval);
        Console.WriteLine(this.add_scrapeTimeout);
        Console.WriteLine(this.add_metricsPath);
        Console.WriteLine(this.add_scheme);
        Console.WriteLine(this.add_targetList.ElementAt(0));
        Console.WriteLine(this.add_labelDict[splitLabels[0]]);

        // JobObj Debug
        Console.WriteLine(prometheusJob.JobName);
        Console.WriteLine(prometheusJob.Scrape_Interval);

        // API Debug
        Console.WriteLine(config.scrape_configs[0].job_name);

        // Deserialize Debug
        //readYamlConfig();

    }

    public void updateScrapingTarget()
    {
        // Set defaults where necessary
        if (this.update_jobName == null || this.update_jobName.Equals("")) { this.update_jobName = "JobDefault"; }
        if (this.update_scrapeInterval == null || this.update_scrapeInterval.Equals("")) { this.update_scrapeInterval = "10s"; }
        if (this.update_scrapeTimeout == null || this.update_scrapeTimeout.Equals("")) { this.update_scrapeTimeout = "5s"; }
        if (this.update_metricsPath == null || this.update_metricsPath.Equals("")) { this.update_metricsPath = "/metrics"; }
        if (this.update_scheme == null || this.update_scheme.Equals("")) { this.update_scheme = "https"; }
        if (this.update_targets == null || this.update_targets.Equals("")) { this.update_targets = "192.168.0.1"; }
        if (this.update_labels == null || this.update_labels.Equals("")) { this.update_labels = "label_1:value_1"; }

        // Fill up collections
        this.update_targetList.AddRange(this.update_targets.Split(","));
        string[] splitLabels = this.update_labels.Split(":");
        for (int index = 0; index < splitLabels.Length; index += 2)
        {
            this.update_labelDict.Add(splitLabels[index], splitLabels[index + 1]);
        }


        // Debug
        Console.WriteLine(this.update_jobName);
        Console.WriteLine(this.update_scrapeInterval);
        Console.WriteLine(this.update_scrapeTimeout);
        Console.WriteLine(this.update_metricsPath);
        Console.WriteLine(this.update_scheme);
        Console.WriteLine(this.update_targetList.ElementAt(0));
        Console.WriteLine(this.update_labelDict[splitLabels[0]]);
    }

    public void removeScrapingTarget()
    {

    }

    public async void readYamlConfig()
    {
        // Read YAML from file
        //text = await HttpClient.GetStringAsync("Example/PrometheusExampleConfiguration_Small.yml");
        //PrometheusConfiguration deserializedConfig = PrometheusYamlDeserializer.desirializeToPrometheusConfiguration(text);

        // Debug
        //foreach(string rule_file in deserializedConfig.rule_files)
        //{
        //    Console.WriteLine(rule_file);
        //}

    }



}
